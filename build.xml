<?xml version="1.0" ?>

<!--
  build.xml - envgen configuration using Ant (http://jakarta.apache.org/ant)
  targets:
    
    clean             remove the files that have been generated by the build process
    compile           compile envgen
    compile-examples  compile all the examples
    docs-javadoc      create javadoc documentation
    init              common task/target initialization
-->

<project name="envgen" default="compile" basedir=".">

  <!-- ============================ COMMON SECTION ========================== -->

  <!-- this is where platform specific settings come in
       (note this has to be read first in case you want to override props) -->
 
  <property file="${build.compiler}.properties"/>

  <!-- our required global properties -->
 
  <property name="app.name"         value="envgen" />
  
  <!-- Project directories, set according to your setup -->
  
  <property name="envgen.home"          value="." />
  <property name="examples.dir"         value="src-examples" />

  <property name="build.dir"            value="build" />
  <property name="scripts.dir"          value="scripts" />
  <property name="doc.dir"              value="doc"/>
  <property name="doc.api.dir"          value="${doc.dir}/api"/>
  <property name="lib.dir"              value="lib" />
  <property name="src.dir"              value="src" />
 
  <property name="debug"       value="on"/>
  <property name="deprecation" value="on"/>
  <property name="jar"         value="jar" />
  <property name="src_level"     value="6"/>
	  
	
  <path id="java.path">
    <pathelement path="${sun.boot.class.path}"/>
  </path> 
	
  <path id="envgen.libs.path">
	 <fileset dir="${envgen.home}/lib">
		   <include name="*.jar"/>
	  </fileset>
  </path>	
	
  <path id="envgen.run.path">
  	<pathelement path="${envgen.home}/build"/>
    <path refid="envgen.libs.path"/> 
    <path refid ="java.path"/> 
  </path>	

  <!-- import the release targets -->
  <import file="${scripts.dir}/observer.xml"/>
	
  <!--*********************************************************************
      * init: common tasks, mainly to setup directories and check what other
      *       tasks can be executed
      *-->
  <target name="init" description="common task/target initialization">
    <tstamp/>

    <echo>****************** envgen build system ********************
    current dir:      ${user.dir}
    user home dir:    ${user.home}
    classpath:        ${java.class.path}
          
    java version:     ${java.version}
    OS:               ${os.name}-${os.arch}-${os.version}
    </echo>

    <echo message="--- creating build directories.."/>
    <mkdir dir="${build.dir}"/>

    <echo/>
  </target>


  <!--*********************************************************************
      * compile-envgen: This creates the class files for envgen
      *-->
	
	 <!-- public compile -->
	  <target name="compile" depends="init,compile-main,compile-models,compile-examples"
	          description="compile all JPF core sources" >
	  </target>
	
	 <target name="compile-main" depends="init">
	    <mkdir dir="build"/>
	    <javac srcdir="src" destdir="build" includeantruntime="false"
	           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
	           classpathref="envgen.libs.path"/>
	 </target>
	
	 <target name="compile-models" depends="init">
	    <mkdir dir="build"/>
	    <javac srcdir="src-models" destdir="build" includeantruntime="false"
	           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
	           classpathref="envgen.libs.path"/>
	 </target>
	
	 <target name="compile-examples" depends="init">
	    <mkdir dir="build"/>
	    <javac srcdir="src-examples" destdir="build" includeantruntime="false"
	           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
	           classpathref="envgen.libs.path"/>
	 </target>


  <!--======================== EXAMPLES SECTION =========================-->
	 	
	 	
		<target name="compile-example" depends=""
		            description="template for compiling an example">
	 	
		        	    <!-- Create the dest directory -->
		        	    <mkdir dir="${target.destdir}"/>
		        	    
		        	    <javac srcdir="${target.srcdir}"
		        	           destdir="${target.destdir}"
		        	           debug="${debug}"
		        	           source="${src_level}"
		        	           deprecation="${deprecation}">
		        	      <classpath>
		        	      	
		        	    	<pathelement path="${target.classpath}"/>
		        	      	
		        	      </classpath>
		        	    </javac>

		</target>

			
  <!--*********************************************************************
    	* generate-example: [optional] generated the environment for the examples
		*-->
	
	
	  <target name="gen-example" depends=""
  		description="template for generating an environment for one example">	  
	  
	    <!-- Create the dest directory -->
	    <mkdir dir="${target.destdir}"/>
	  	
	    <java classname="edu.ksu.cis.envgen.EnvGenerator"
	          classpath="${target.srcdir}"
	          classpathref="envgen.run.path"
	          dir="${envgen.home}"
	          fork="yes"
	          maxmemory="1024m"
	          
	    >
	    	<assertions>
	    	  <enable/>
	    	</assertions>
	    	
	      <arg value="-c"/>
	      <arg value="${target.config}"/>
	     </java>
	  	
	  </target>		
	 	


	 <!--*********************************************************************
	      * compile-examples: [optional] Compile the examples
	      *-->
	 	
	 	
		<target name="compile-gen-example" depends=""
		            description="template for compiling a generated example">
		        	    
		        <javac srcdir="${target.srcdir}"
		        	   destdir="${target.srcdir}"
		        	   debug="${debug}"
		        	   source="${src_level}"
		        	   deprecation="${deprecation}">
		        	  <classpath>
		        	    <pathelement path="${stubs.home}"/>
		        	        <path refid="java.path"/>
		        	  </classpath>
		        </javac>
		</target>	
	
	

  <!--=============== DOCUMENTATION AND FORMAT SECTION ===================-->


  <!--*********************************************************************
      * docs-javadoc: create API documentation with javadoc
      *-->
  <target name="docs-javadoc" depends="init"
          description="create javadoc documentation">
    <mkdir dir="${doc.api.dir}"/>
    
    <echo message="--- running javadoc to create documentation.."/>
    
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${doc.api.dir}"
             author="true"
             version="true"
             use="true"
             source="${src_level}"
             windowtitle="${app.name} API"
             doctitle="${app.name}">
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </javadoc>
  </target>


  <!--========================= HOUSEKEEPING =============================-->

  <!--*********************************************************************
      * clean: cleanup from previous tasks/builds
      *-->
  <target name="clean"
	  description="">
    <delete dir="${build.dir}" />
    <delete dir="${doc.api.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
    </delete>
    <delete>
      <fileset dir="." includes="conf.doxygen" />
    </delete>
    <delete>
      <fileset dir="." includes="**/TEST-*.txt" />
    </delete>
  </target>

</project>
