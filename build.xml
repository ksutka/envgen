<?xml version="1.0" ?>

<!--
  build.xml - envgen configuration using Ant (http://jakarta.apache.org/ant)
  targets:
    
    clean             remove the files that have been generated by the build process
    compile           compile envgen
    envgen			  run envgen
    compile-examples  compile all the examples
    dist              generate the compressed distribution tar files
    dist-src          generate the compressed source distribution tar files
    docs-javadoc      create javadoc documentation
    format            format all Java sources
    init              common task/target initialization
    jar               create jar archives for envgen
    run-tests         run all envgen tests
-->

<project name="envgen" default="compile" basedir=".">

  <!-- ============================ COMMON SECTION ========================== -->

  <!-- this is where platform specific settings come in
       (note this has to be read first in case you want to override props) -->
  <property file="local.properties"/>
  <property file="${build.compiler}.properties"/>

  <!-- our required global properties -->
 
  <property name="app.name"         value="envgen" />
  
  <!-- Project directories, set according to your setup -->
  
  <property name="envgen.home"          value="." />
  <property name="examples.dir"         value="src-examples" />

  <property name="build.dir"            value="build" />
  <property name="build.dist.dir"       value="${build.dir}/dist" />
  <property name="build.test.dir"       value="${build.dir}/test" />
  <property name="scripts.dir"          value="scripts" />
  <property name="doc.dir"              value="doc"/>
  <property name="doc.api.dir"          value="${doc.dir}/api"/>
  <property name="lib.dir"              value="lib" />
  <property name="src.dir"              value="src" />
 
  <property name="debug"       value="on"/>
  <property name="deprecation" value="on"/>
  <property name="jar"         value="jar" />
	
  <path id="java.path">
    <pathelement path="${sun.boot.class.path}"/>
  </path> 
	
  <path id="envgen.libs.path">
	 <fileset dir="${envgen.home}/lib">
		   <include name="*.jar"/>
	  </fileset>
  </path>	
	
  <path id="envgen.run.path">
  	<pathelement path="${envgen.home}/build"/>
    <path refid="envgen.libs.path"/> 
    <path refid ="java.path"/> 
  </path>	

  <!-- import the release targets -->
  <import file="${scripts.dir}/observer.xml"/>
	
  <!--*********************************************************************
      * init: common tasks, mainly to setup directories and check what other
      *       tasks can be executed
      *-->
  <target name="init" description="common task/target initialization">
    <tstamp/>

    <echo>****************** envgen build system ********************
current dir:      ${user.dir}
user home dir:    ${user.home}
classpath:        ${java.class.path}
          
java version:     ${java.version}
OS:               ${os.name}-${os.arch}-${os.version}
    </echo>

    <echo>
NOTE - if property values are printed with brackets
       (e.g. '${bla}'), it means they are NOT defined.
       This is a 'echo' task itch.
    </echo>

    <available file="local.properties" property="local.properties.present"/>
    <echo message="local.properties.present=${local.properties.present}" />
    <echo message="NOTE - some targets might be skipped if you don't have a 'local.properties' file" />

    <echo/>
    <echo message="--- creating build directories.."/>
    <mkdir dir="${build.dir}"/>

    <echo/>
  </target>


  <!--*********************************************************************
      * compile-envgen: This creates the class files for envgen
      *-->
  <target name="compile" depends="init"
          description="compile all envgen classes">
    <javac srcdir="${src.dir}"
           destdir="${build.dir}"
           debug="${debug}"
           source="1.6"
           deprecation="${deprecation}">
      <classpath>
        <pathelement path="${src.dir}:${envgen.libs.path}"/>
      </classpath>
    </javac>
    
    <copy todir="${build.dir}">
       <fileset dir="${src.dir}" includes="**/*.spec, **/*.properties"/>
    </copy>

  </target>


  <!--======================== EXAMPLES SECTION =========================-->
	 <!--*********************************************************************
	      * compile-gen-compile-examples: [optional] Compile the examples
	      *-->
	 	
	 	
		<target name="run-examples" depends="compile"
		            description="compile examples, generate environments, recompile.">

		    <antcall target="compile-examples"/>
   		    <antcall target="gen-examples"/>	
	   		<antcall target="compile-gen-examples"/>		
   			
			<!-- add more examples here -->

		</target>

  	
	 <!--*********************************************************************
	      * compile-examples: [optional] Compile the examples
	      *-->
	 	
	 	
		<target name="compile-examples" depends=""
		            description="Generate releases for all examples">
	 	
		    <!-- Create the build/examples directory -->
	 	
		    <mkdir dir="${examples.build.dir}"/>
		    	
			<antcall target="compile-observer"/>
	   				

			<!-- add more examples here -->

		</target>
	 	
			 	

  	
	 <!--*********************************************************************
	      * compile-examples: [optional] Compile the examples
	      *-->
	 	
	 	
		<target name="compile-example" depends=""
		            description="template for compiling an example">
	 	
		        	    <!-- Create the dest directory -->
		        	    <mkdir dir="${target.destdir}"/>
		        	    
		        	    <javac srcdir="${target.srcdir}"
		        	           destdir="${target.destdir}"
		        	           debug="${debug}"
		        	           source="1.6"
		        	           deprecation="${deprecation}">
		        	      <classpath>
		        	      	
		        	    	<pathelement path="${target.classpath}"/>
		        	      	
		        	      </classpath>
		        	    </javac>

		</target>
	 	
	
	 <!--*********************************************************************
	      * generate-examples: [optional] generated the environment for the examples
	      *-->
	
	<target name="gen-examples" depends=""
	            description="generate environment for examples">

		 <antcall target="gen-observer"/>
			    	
		<!-- add more examples here -->

	</target>

			
  <!--*********************************************************************
    	* generate-example: [optional] generated the environment for the examples
		*-->
	
	
	  <target name="gen-example" depends=""
  		description="template for generating an environment for one example">	  
	  
	    <!-- Create the dest directory -->
	    <mkdir dir="${target.destdir}"/>
	  	
	    <java classname="edu.ksu.cis.envgen.EnvGenerator"
	          classpath="${target.srcdir}"
	          classpathref="envgen.run.path"
	          dir="${envgen.home}"
	          fork="yes"
	          maxmemory="1024m"
	          
	    >
	    	<assertions>
	    	  <enable/>
	    	</assertions>
	    	
	      <arg value="-c"/>
	      <arg value="${target.config}"/>
	     </java>
	  	
	  </target>		
	
	
<!--*********************************************************************
	  * generate-examples: [optional] generated the environment for the examples
	  *-->
		
	<target name="compile-gen-examples" depends=""
		        description="compile generated example">

		   <antcall target="compile-gen-observer"/>
		   
		   <!-- add more examples here -->

	</target>	 	


	 <!--*********************************************************************
	      * compile-examples: [optional] Compile the examples
	      *-->
	 	
	 	
		<target name="compile-gen-example" depends=""
		            description="template for compiling a generated example">
		        	    
		        	    <javac srcdir="${target.srcdir}"
		        	           destdir="${target.srcdir}"
		        	           debug="${debug}"
		        	           source="1.6"
		        	           deprecation="${deprecation}">
		        	      <classpath>
		        	      	<pathelement path="${stubs.home}"/>
		        	        <path refid="java.path"/>
		        	      </classpath>
		        	    </javac>
		</target>	
	
	
	
	 <!--*********************************************************************
	      * slice-examples: [optional] Slice the examples
	      *-->
	 	
	 	
		<target name="slice-examples" depends=""
		            description="Generate releases for all examples">
	 	
		    <!-- Create the build/examples directory -->
		    	
	   		<antcall target="slice-observer"/>	

			<!-- add more examples here -->

		</target>
			
	 <!--*********************************************************************
		      * mc-examples: [optional] model check the examples
		      *-->
		 	
		 	
			<target name="mc-examples" depends=""
			            description="runs jpf on the examples">
		 
		   		<antcall target="mc-observer"/>	

				<!-- add more examples here -->

			</target>
	
  <!--======================== TEST SECTION ==============================-->


  <!--=============== DOCUMENTATION AND FORMAT SECTION ===================-->


  <!--*********************************************************************
      * docs-javadoc: create API documentation with javadoc
      *-->
  <target name="docs-javadoc" depends="init"
          description="create javadoc documentation">
    <mkdir dir="${doc.api.dir}"/>
    
    <echo message="--- running javadoc to create documentation.."/>
    
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${doc.api.dir}"
             author="true"
             version="true"
             use="true"
             source="1.6"
             windowtitle="${app.name} API"
             doctitle="${app.name}">
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </javadoc>
  </target>


  <!--========================= HOUSEKEEPING =============================-->

  <!--*********************************************************************
      * clean: cleanup from previous tasks/builds
      *-->
  <target name="clean"
	  description="">
    <delete dir="${build.dir}" />
    <delete dir="${doc.api.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
    </delete>
    <delete>
      <fileset dir="." includes="conf.doxygen" />
    </delete>
    <delete>
      <fileset dir="." includes="**/TEST-*.txt" />
    </delete>
  </target>

</project>
