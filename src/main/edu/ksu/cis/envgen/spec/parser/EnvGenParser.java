/* Generated By:JavaCC: Do not edit this line. EnvGenParser.java */
package edu.ksu.cis.envgen.spec.parser;

import java.util.*;
import java.util.logging.*;

import soot.*;
import soot.util.*;

import edu.ksu.cis.envgen.codegen.*;
import edu.ksu.cis.envgen.spec.*;
import edu.ksu.cis.envgen.codegen.ast.*;
import edu.ksu.cis.envgen.codegen.ast.stmt.*;
import edu.ksu.cis.envgen.codegen.ast.expr.*;
import edu.ksu.cis.envgen.util.*;

public class EnvGenParser implements EnvGenParserConstants {
  private static UserSpec userSpec = new UserSpec();
  //private static SEManager sem = new SEManager();

  private static Logger logger =  Logger.getLogger("envgen.spec.parser");

  public static UserSpec getUserSpec(){
    return userSpec;
  }

  //public static SEManager getSEManager(){
  //  return sem;
  //}

  public static void main(String args[]) throws ParseException{
    EnvGenParser parser;
    if (args.length == 0) {
      System.out.println("EnvGenParser:  Reading from standard input . . .");
      parser = new EnvGenParser(System.in);
    } else if (args.length == 1) {
      System.out.println("EnvGenParser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new EnvGenParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("EnvGenParser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("EnvGenParser:  Usage is one of:");
      System.out.println("         java EnvGenParser < inputfile");
      System.out.println("OR");
      System.out.println("         java EnvGenParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("EnvGenParser:  Environment assumptions parsed successfully.");
    } catch (ParseException e) {

      System.out.println("EnvGenParser:  Encountered errors during parse.");
      System.out.println(e);
    }
  }

/*****************************************
 * THE SPECIFICATION LANGUAGE GRAMMAR STARTS HERE 
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  static final public void CompilationUnit() throws ParseException {
    jj_consume_token(ENVIRONMENT);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SETUP:
      Setup();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROPERTIES:
      Properties();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    Assumptions();
    jj_consume_token(RBRACE);
    jj_consume_token(0);
  }

  static final public void Setup() throws ParseException {
 String type, varName;
 JavaExpr expr = null;
 Proposition prop;
    jj_consume_token(SETUP);
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      expr = Proposition();
      jj_consume_token(SEMICOLON);
      prop = new Proposition(expr);
      userSpec.addInitProposition(prop);
    }
    jj_consume_token(RBRACE);
  }

  static final public void Properties() throws ParseException {
 Token t1, t2; List s = null; SootMethod sm = null; Proposition mc; JavaExpr e;
    jj_consume_token(PROPERTIES);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      e = Proposition();
      jj_consume_token(SEMICOLON);
    mc = new Proposition(e);
    mc.setLabel(t1.image);

    userSpec.addDefinition(t1.image, mc);
    //see if the default methods need to be updated with labels
    //ast.updateDefaultMethods(mc, t1.image);
    //ast.getReverseDefinitions().put((t2.image + s), t1.image);

    }
    jj_consume_token(RBRACE);
  }

  static final public void Assumptions() throws ParseException {
  RENode regNode; LTLNode ltlNode;
  Token threadNameToken = null;
  Token numToken = null;
  String threadName = null;
  int num = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DRIVERASSUMPTIONS:
      jj_consume_token(DRIVERASSUMPTIONS);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LTLASSUMPTIONS:
        jj_consume_token(LTLASSUMPTIONS);
        jj_consume_token(LBRACE);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GLOBALLY:
          case EVENTUALLY:
          case NEXT:
          case TRUE:
          case FALSE:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
    //record propositions for each separate specification
    userSpec.addThread();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            numToken = jj_consume_token(INTEGER_LITERAL);
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            threadNameToken = jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          ltlNode = LTLExp();
          jj_consume_token(129);
    if(numToken != null){
        num = Integer.parseInt(numToken.image);
        userSpec.setThreadNum(num);

    }

    if(threadNameToken != null){
        threadName = threadNameToken.image;
        userSpec.setThreadName(threadName);
    }

    userSpec.setThreadSpecification(ltlNode);
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REASSUMPTIONS:
        jj_consume_token(REASSUMPTIONS);
        jj_consume_token(LBRACE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
    //record propositions for each separate specification

    userSpec.addThread();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            numToken = jj_consume_token(INTEGER_LITERAL);
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            threadNameToken = jj_consume_token(IDENTIFIER);
            jj_consume_token(COLON);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          regNode = RegExp();
          jj_consume_token(129);
    //System.out.println("*****RegExp: "+regNode);

    if(numToken != null){
        num = Integer.parseInt(numToken.image);
        userSpec.setThreadNum(num);
    }

    if(threadNameToken != null){
        threadName = threadNameToken.image;
        userSpec.setThreadName(threadName);

    }

    userSpec.setThreadSpecification(regNode);
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUBASSUMPTIONS:
      jj_consume_token(STUBASSUMPTIONS);
      jj_consume_token(LBRACE);
    Token methodNameToken;
    String className;
    SootClass sc;
    //SootMethod sm;
    Body body;
    Chain units;
    JavaStmt stmt;
    StubSpec stubSpec;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        className = Name();
        jj_consume_token(LBRACE);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_6;
          }
          ResultType();
          methodNameToken = jj_consume_token(IDENTIFIER);
          FormalParameters();
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_7;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          }
        //check whether the method is valid and get the corresponding
        //soot method for it

        //sm = sem.checkMethod(className, methodNameToken.image);
                stubSpec = new StubSpec(className, methodNameToken.image);
          stmt = Block();
        //put the Java body into the corresponding method
        //make it active
        body = new JavaBody();
        //body.setMethod(sm);
        units = body.getUnits();
        units.add(stmt);
        //sm.setActiveBody( body);
        stubSpec.setBody(body);
        userSpec.addStubSpec(stubSpec);
        }
        jj_consume_token(RBRACE);
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

/**********************************************
 * Regular Expressions
 **********************************************/

/**********************************************
 * CHOICE
 **********************************************/
  static final public RENode RegExp() throws ParseException {
  RENode newNode, node;  String s; Token t; int count = 0;
    node = RegSeq();
    newNode = new RENode('|', 0, new Vector());
    newNode.addOperand(node);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(BIT_OR);
      node = RegSeq();
        newNode.addOperand(node);
        count ++;
    }
    if(count == 0)
      {if (true) return node;}
    {if (true) return newNode;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * SEQUENCE
 **********************************************/
  static final public RENode RegSeq() throws ParseException {
  RENode newNode, node ; String s; Token t; int count = 0;
    node = RegTuple();
    newNode = new RENode('S', 0, new Vector());
    newNode.addOperand(node);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(SEMICOLON);
      node = RegTuple();
      newNode.addOperand(node);
      count++;
    }
    if(count == 0)
      {if (true) return node;}
    {if (true) return newNode;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * RANGE, '*', '+', '?'
 **********************************************/
  static final public RENode RegTuple() throws ParseException {
  RENode newNode = null;
  RENode node; String s; Token t;
    node = RegLeaf();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
    case PLUS:
    case STAR:
    case XOR:
      newNode = RegOp(node);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
   if(newNode != null)
     {if (true) return newNode;}
    {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  static final public RENode RegOp(RENode node) throws ParseException {
 RENode newNode; String s; Token t1, t2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XOR:
      jj_consume_token(XOR);
      jj_consume_token(LBRACE);
      t1 = jj_consume_token(INTEGER_LITERAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        jj_consume_token(RBRACE);
   newNode = new RENode('^', 0, new Vector());
   newNode.setVal(Integer.parseInt(t1.image));
   newNode.addOperand(node);
   {if (true) return newNode;}
        break;
      case COMMA:
        jj_consume_token(COMMA);
        t2 = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   newNode = new RENode('^', 0, new Vector());
   newNode.setVal(Integer.parseInt(t1.image));
   newNode.setSecondVal(Integer.parseInt(t2.image));
   newNode.addOperand(node);
   {if (true) return newNode;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
   newNode = new RENode('+', 0, new Vector());
   newNode.addOperand(node);
   {if (true) return newNode;}
      break;
    case STAR:
      jj_consume_token(STAR);
   newNode = new RENode('*', 0, new Vector());
   newNode.addOperand(node);
   {if (true) return newNode;}
      break;
    case HOOK:
      jj_consume_token(HOOK);
   newNode = new RENode('?', 0, new Vector());
   newNode.addOperand(node);
   {if (true) return newNode;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * PROPOSITION, NEGATION, (EXP)
 **********************************************/
  static final public RENode RegLeaf() throws ParseException {
  RENode newNode, node;  String s; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      newNode = RegProposition();
    {if (true) return newNode;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      newNode = RegExp();
      jj_consume_token(RPAREN);
      {if (true) return newNode;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * PROPOSITION
 **********************************************/
  static final public RENode RegProposition() throws ParseException {
  RENode newNode;

  String receiver = "";
  String methodName = "";
  //String args = "";
  List args = null;

  JavaExpr expr = null;

  String type = "";
  String  varName = "";
  String  value = "";

  Token t1 = null;
  Token t2 = null;

  Proposition prop;
    //method invoke
    
       //can also specify the receiver object here
    
       //(LOOKAHEAD(2) t1=<IDENTIFIER> ".")?  t2 = <IDENTIFIER> (args = Arguments())* 
    
       expr = Proposition();
    newNode = new RENode('P', 0, null);
    //need to validate the receiver object	

    //if(t1!=null)
    //  receiver = t1.image;

    //methodName = t2.image;

    //prop = new MethodCall(receiver, methodName, args);

    prop = new Proposition(expr);

    newNode.setProposition(prop);

    userSpec.addProposition(prop, newNode);

    {if (true) return newNode;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * LTL Formulas
 **********************************************/

/**********************************************
 * IMPLICATION and OR
 **********************************************/
  static final public LTLNode LTLExp() throws ParseException {
 LTLNode newNode, node1; LTLNode node2 = null;
    node1 = LTLTerm();
    if (jj_2_1(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLICATION:
        jj_consume_token(IMPLICATION);
        node2 = LTLExp();
    if(node2!=null){
      newNode = new LTLNode('|', 0, new LTLNode('!', 0, null, node1), node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
        break;
      case BIT_OR:
        jj_consume_token(BIT_OR);
        node2 = LTLExp();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if(node2!=null){
      newNode = new LTLNode('|',0,node1,node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * EQUIVALENCE , AND, UNTIL, V
 **********************************************/
  static final public LTLNode LTLTerm() throws ParseException {
 LTLNode newNode, node1; LTLNode node2 = null;
    node1 = LTLFormula();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNTIL:
    case V:
    case BIT_AND:
    case EQUIVALENCE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUIVALENCE:
        jj_consume_token(EQUIVALENCE);
        node2 = LTLExp();
    if(node2!=null){
      newNode = new LTLNode('&',0,node1,node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
        break;
      case BIT_AND:
        jj_consume_token(BIT_AND);
        node2 = LTLExp();
    if(node2!=null){
      newNode = new LTLNode('&',0,node1,node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
        node2 = LTLExp();
    if(node2!=null){
      newNode = new LTLNode('U',0,node1,node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
        break;
      case V:
        jj_consume_token(V);
        node2 = LTLExp();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    if(node2!=null){
      newNode = new LTLNode('V',0,node1,node2);
      {if (true) return newNode;}
    }
    else
      {if (true) return node1;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * GLOBALLY, EVENTUALLY, NOT, "(" LTLExp ")"
 * Proposition, true, false
 **********************************************/
  static final public LTLNode LTLFormula() throws ParseException {
 LTLNode newNode, node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBALLY:
      jj_consume_token(GLOBALLY);
      node = LTLLeaf();
    newNode = new LTLNode('V', 0, new LTLNode('F', 0, null, null), node);
    {if (true) return newNode;}
      break;
    case EVENTUALLY:
      jj_consume_token(EVENTUALLY);
      node = LTLLeaf();
    newNode = new LTLNode('U', 0, new LTLNode('T', 0, null, null), node);
    {if (true) return newNode;}
      break;
    case BANG:
      jj_consume_token(BANG);
      node = LTLLeaf();
    newNode = new LTLNode('!', 0, null, node);
    {if (true) return newNode;}
      break;
    case NEXT:
      jj_consume_token(NEXT);
      node = LTLLeaf();
    newNode = new LTLNode('X', 0, null, node);
    {if (true) return newNode;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
      node = LTLLeaf();
    {if (true) return new LTLNode('T', 0, null, null);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
      node = LTLLeaf();
    {if (true) return new LTLNode('F', 0, null, null);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      newNode = LTLExp();
      jj_consume_token(RPAREN);
      {if (true) return newNode;}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      newNode = LTLProposition();
    {if (true) return newNode;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * GLOBALLY, EVENTUALLY, NOT, "(" LTLExp ")"
 * Proposition, true, false
 **********************************************/
  static final public LTLNode LTLLeaf() throws ParseException {
  LTLNode newNode, node;  String s; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GLOBALLY:
      jj_consume_token(GLOBALLY);
      node = LTLFormula();
    newNode = new LTLNode('V', 0, new LTLNode('F', 0, null, null), node);
    {if (true) return newNode;}
      break;
    case EVENTUALLY:
      jj_consume_token(EVENTUALLY);
      node = LTLFormula();
    newNode = new LTLNode('U', 0, new LTLNode('T', 0, null, null), node);
    {if (true) return newNode;}
      break;
    case TRUE:
    case FALSE:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      newNode = LTLProposition();
    {if (true) return newNode;}
      break;
    case BANG:
      jj_consume_token(BANG);
      node = LTLFormula();
    newNode = new LTLNode('!', 0, null, node);
    {if (true) return newNode;}
      break;
    case NEXT:
      jj_consume_token(NEXT);
      node = LTLFormula();
    newNode = new LTLNode('X', 0, null, node);
    {if (true) return newNode;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      newNode = LTLExp();
      jj_consume_token(RPAREN);
      {if (true) return newNode;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * PROPOSITION
 **********************************************/

/* 
 
LTLNode LTLProposition():
{ LTLNode newNode; 
  String receiver = "";
  String methodName = "";
  //String args = "";
  List args = null;
  Token t1 = null; 
  Token t2; 
}

{
  //can also specify the receiver object here
  ( LOOKAHEAD(2) t1 = <IDENTIFIER> ".")?  t2 = <IDENTIFIER> (args = PropArguments())* {

    newNode = new LTLNode('P', 0, null, null);
    //need to validate the receiver object
    if(t1!=null){
      receiver = t1.image+".";
    }
   
    methodName = t2.image;

    return newNode;
  }
}

*/
  static final public LTLNode LTLProposition() throws ParseException {
  LTLNode newNode;

  List args = null;
  JavaExpr expr = null;
  Token t1 = null;
  Token t2 = null;
  Proposition prop;
    //(LOOKAHEAD(2) t1=<IDENTIFIER> ".")?  t2 = <IDENTIFIER> (args = Arguments())* 
    
       expr = Proposition();
    newNode = new LTLNode('P', 0, null, null);

    prop = new Proposition(expr);

    newNode.setProposition(prop);

    userSpec.addProposition(prop, newNode);

    {if (true) return newNode;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * Specification propositions
 **********************************************/
/*
 * Slightly restricted Java expressions
 */
  static final public JavaExpr Proposition() throws ParseException {
 JavaExpr expr = null;
    if (jj_2_2(2147483647)) {
      expr = PropLocalVariableDeclaration();
    {if (true) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        //LOOKAHEAD( PropPrimaryExpression() AssignmentOperator() )
          expr = PropExpression();
    {if (true) return expr;}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public JavaExpr PropExpression() throws ParseException {
 JavaExpr expr = null;
    if (jj_2_3(2147483647)) {
      expr = PropAssignment();
                           {if (true) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        expr = PropPrimaryExpression();
                                  {if (true) return expr;}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public JavaExpr PropAssignment() throws ParseException {
 JavaExpr left, right; String op;
    left = PropPrimaryExpression();
    op = AssignmentOperator();
    right = PropExpression();
    //return (s1 + " " + op + " " + s2);
    {if (true) return new AssignExpr(left, op, right);}
    throw new Error("Missing return statement in function");
  }

  static final public JavaExpr PropLocalVariableDeclaration() throws ParseException {
  String type, name = null;
  JavaExpr e = null;
    type = Type();
    name = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e = PropPrimaryExpression();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    {if (true) return new TypeDeclExpr(type, name, e);}
    throw new Error("Missing return statement in function");
  }

  static final public JavaExpr PropPrimaryExpression() throws ParseException {
  JavaExpr e = null;
  String s = null;
  Token t = null;
  Token t2  = null;
  List args = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      s = Literal();
    {if (true) return new StrExpr(s);}
      break;
    case NEW:
      e = PropAllocationExpression();
    {if (true) return e;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = PropArguments();
     {if (true) return new InvokeExpr(null, t.image, args);}
          break;
        case DOT:
          jj_consume_token(DOT);
          t2 = jj_consume_token(IDENTIFIER);
          args = PropArguments();
     {if (true) return new InvokeExpr(t.image, t2.image, args);}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
     {if (true) return new StrExpr(t.image);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public JavaExpr PropAllocationExpression() throws ParseException {
String s, s2 = null;
List args = null;
    if (jj_2_4(2)) {
      jj_consume_token(NEW);
      s = PrimitiveType();
      s2 = ArrayDimensions();
    logger.severe("finish array dimensions");
    {if (true) return new NewExpr(s, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        s = Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          args = PropArguments();
          break;
        case LBRACKET:
          s2 = ArrayDimensions();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    if(s2 != null)
      logger.severe("finish array dimensions");

    {if (true) return new NewExpr(s, args);}
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public List PropArguments() throws ParseException {
List args = new ArrayList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      args = PropArgumentList();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  static final public List PropArgumentList() throws ParseException {
List args = new ArrayList();
JavaExpr s, s2 = null;
    s = PropExpression();
    args.add(s);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      s2 = PropExpression();
    args.add(s2);
    }
   {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

/**********************************************
 * JAVA Constructs
 **********************************************/
/*
 * Program structuring syntax follows.
 */
  static final public void JavaCompilationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_11;
      }
      ImportDeclaration();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case PUBLIC:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_12;
      }
      TypeDeclaration();
    }
    jj_consume_token(0);
  }

  static final public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
    Name();
    jj_consume_token(SEMICOLON);
  }

  static final public void ImportDeclaration() throws ParseException {
    jj_consume_token(IMPORT);
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void TypeDeclaration() throws ParseException {
    if (jj_2_5(2147483647)) {
      ClassDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PUBLIC:
        InterfaceDeclaration();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Declaration syntax follows.
 */
  static final public void ClassDeclaration() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      Name();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      NameList();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_14;
      }
      ClassBodyDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  static final public void ClassBodyDeclaration() throws ParseException {
    if (jj_2_6(2)) {
      StaticInitializer();
    } else if (jj_2_7(2147483647)) {
      ConstructorDeclaration();
    } else if (jj_2_8(2147483647)) {
      MethodDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// This production is to determine lookahead only.
  static final public void MethodDeclarationLookahead() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  static final public void InterfaceDeclaration() throws ParseException {
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      NameList();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_17;
      }
      InterfaceMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  static final public void InterfaceMemberDeclaration() throws ParseException {
    if (jj_2_9(2147483647)) {
      MethodDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
        FieldDeclaration();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void FieldDeclaration() throws ParseException {
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Type();
    VariableDeclarator();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  static final public String VariableDeclaratorId() throws ParseException {
 String s; Token t;
    t = jj_consume_token(IDENTIFIER);
                    s = t.image;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GLOBALLY:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        break;
      case GLOBALLY:
        jj_consume_token(GLOBALLY);
    s = s.concat("[]");
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String VariableInitializer() throws ParseException {
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        s1 = VariableInitializer();
        label_21:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_21;
          }
          jj_consume_token(COMMA);
          s2 = VariableInitializer();
      s1 = s1 + "," + s2;
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    {if (true) return "{" + s1 + "}";}
      break;
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      s = Expression();
    {if (true) return s;}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void MethodDeclaration() throws ParseException {
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    ResultType();
    MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MethodDeclarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_23;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  static final public void FormalParameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_24;
        }
        jj_consume_token(COMMA);
        FormalParameter();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  static final public void FormalParameter() throws ParseException {
    Type();
    VariableDeclaratorId();
  }

  static final public void ConstructorDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_11(2)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_25;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

  static final public void ExplicitConstructorInvocation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      Arguments();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void StaticInitializer() throws ParseException {
    jj_consume_token(STATIC);
    Block();
  }

/*
 * Type, name and expression syntax follows.
 */
  static final public String Type() throws ParseException {
 String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      s = PrimitiveType();
      break;
    case IDENTIFIER:
      s = Name();
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_26;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    s = s.concat("[]");
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
             {if (true) return "boolean";}
      break;
    case CHAR:
      jj_consume_token(CHAR);
          {if (true) return "char";}
      break;
    case BYTE:
      jj_consume_token(BYTE);
          {if (true) return "byte";}
      break;
    case SHORT:
      jj_consume_token(SHORT);
           {if (true) return "short";}
      break;
    case INT:
      jj_consume_token(INT);
         {if (true) return "int";}
      break;
    case LONG:
      jj_consume_token(LONG);
          {if (true) return "long";}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
           {if (true) return "float";}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
            {if (true) return "double";}
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String Name() throws ParseException {
 String s = null;
 Token t1, t2;
    t1 = jj_consume_token(IDENTIFIER);
                      s=t1.image;
    label_27:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(DOT);
      t2 = jj_consume_token(IDENTIFIER);
                                        s = s.concat("."+t2.image);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public void NameList() throws ParseException {
    Name();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

/*
 * Expression syntax follows.
 */
  static final public String Expression() throws ParseException {
 String s = null;
    if (jj_2_13(2147483647)) {
      s = Assignment();
                    {if (true) return s;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        s = ConditionalExpression();
                               {if (true) return s;}
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Assignment() throws ParseException {
 String s1, s2, op;
    s1 = PrimaryExpression();
    op = AssignmentOperator();
    s2 = Expression();
    {if (true) return (s1 + " " + op + " " + s2);}
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
       {if (true) return "=";}
      break;
    case 130:
      jj_consume_token(130);
        {if (true) return "*=";}
      break;
    case 131:
      jj_consume_token(131);
        {if (true) return "/=";}
      break;
    case 132:
      jj_consume_token(132);
        {if (true) return "%=";}
      break;
    case 133:
      jj_consume_token(133);
        {if (true) return "+=";}
      break;
    case 134:
      jj_consume_token(134);
        {if (true) return "-=";}
      break;
    case 135:
      jj_consume_token(135);
         {if (true) return "<<=";}
      break;
    case 136:
      jj_consume_token(136);
         {if (true) return ">>=";}
      break;
    case 137:
      jj_consume_token(137);
          {if (true) return ">>>=";}
      break;
    case 138:
      jj_consume_token(138);
         {if (true) return  "&=";}
      break;
    case 139:
      jj_consume_token(139);
        {if (true) return "^=" ;}
      break;
    case 140:
      jj_consume_token(140);
        {if (true) return "|=";}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ConditionalExpression() throws ParseException {
 String s;
 String s2 = null;
 String s3 = null;
    s = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      s2 = Expression();
      jj_consume_token(COLON);
      s3 = ConditionalExpression();
    s = s + " ? " + s2 + " : " + s3;
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String ConditionalOrExpression() throws ParseException {
 String s, s2 = null;
    s = ConditionalAndExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_29;
      }
      jj_consume_token(SC_OR);
      s2 = ConditionalAndExpression();
    s = s + " || "+ s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String ConditionalAndExpression() throws ParseException {
 String s, s2 = null;
    s = InclusiveOrExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_30;
      }
      jj_consume_token(SC_AND);
      s2 = InclusiveOrExpression();
    s = s+ " && "+ s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String InclusiveOrExpression() throws ParseException {
 String s, s2 = null;
    s = ExclusiveOrExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_31;
      }
      jj_consume_token(BIT_OR);
      s2 = ExclusiveOrExpression();
    s = s + " | " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String ExclusiveOrExpression() throws ParseException {
 String s, s2 = null;
    s = AndExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_32;
      }
      jj_consume_token(XOR);
      s2 = AndExpression();
    s = s + " ^ " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String AndExpression() throws ParseException {
 String s, s2 = null;
    s = EqualityExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_33;
      }
      jj_consume_token(BIT_AND);
      s2 = EqualityExpression();
    s = s + " & " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String EqualityExpression() throws ParseException {
 String s, s2 = null;
 Token t;
    s = InstanceOfExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = InstanceOfExpression();
    s = s + " "+ t.image + " " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String InstanceOfExpression() throws ParseException {
 String s, s2 = null;
    s = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      s2 = Type();
    s = s + " instanceof " + s2;
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String RelationalExpression() throws ParseException {
 String s, s2 = null;
 Token t;
    s = ShiftExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = ShiftExpression();
    s = s + " " + t.image + " " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String ShiftExpression() throws ParseException {
 String s, s2 = null;
 Token t;
    s = AdditiveExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 141:
      case 142:
      case 143:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_36;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 141:
        t = jj_consume_token(141);
        break;
      case 142:
        t = jj_consume_token(142);
        break;
      case 143:
        t = jj_consume_token(143);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = AdditiveExpression();
    s = s + " " + t.image + " " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String AdditiveExpression() throws ParseException {
 String s, s2 = null;
 Token t;
    s = MultiplicativeExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_37;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = MultiplicativeExpression();
    s =  s + " " + t.image + " " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String MultiplicativeExpression() throws ParseException {
 String s, s2 = null;
 Token t;
    s = UnaryExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s2 = UnaryExpression();
    s = s + " " + t.image + " " + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryExpression() throws ParseException {
 String s = null;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = UnaryExpression();
                                                {if (true) return (t.image + " " + s);}
      break;
    case INCR:
      s = PreIncrementExpression();
                                {if (true) return s;}
      break;
    case DECR:
      s = PreDecrementExpression();
                                {if (true) return s;}
      break;
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      s = UnaryExpressionNotPlusMinus();
                                     {if (true) return s;}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String PreIncrementExpression() throws ParseException {
 String s = null;
    jj_consume_token(INCR);
    s = PrimaryExpression();
    {if (true) return " ++ "+ s;}
    throw new Error("Missing return statement in function");
  }

  static final public String PreDecrementExpression() throws ParseException {
 String s = null;
    jj_consume_token(DECR);
    s = PrimaryExpression();
    {if (true) return " -- " + s;}
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryExpressionNotPlusMinus() throws ParseException {
 String s = null;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        t = jj_consume_token(TILDE);
        break;
      case BANG:
        t = jj_consume_token(BANG);
        break;
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = UnaryExpression();
    {if (true) return t.image + " " + s;}
      break;
    default:
      jj_la1[104] = jj_gen;
      if (jj_2_14(2147483647)) {
        s = CastExpression();
                        {if (true) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          s = PostfixExpression();
                           {if (true) return s;}
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  static final public void CastLookahead() throws ParseException {
    if (jj_2_15(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_16(2147483647)) {
      jj_consume_token(LPAREN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case TRUE:
        case FALSE:
        case NULL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public String PostfixExpression() throws ParseException {
 String s = null;
 Token t = null;
    s = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECR:
        t = jj_consume_token(DECR);
        break;
      case INCR:
        t = jj_consume_token(INCR);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    if(t != null)
      s = s + t.image;
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String CastExpression() throws ParseException {
 String s, s2 = null;
    if (jj_2_17(2)) {
      jj_consume_token(LPAREN);
      s = PrimitiveType();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_39;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
    s = s + "[]";
      }
      jj_consume_token(RPAREN);
        s = "(" + s + ")";
      s2 = UnaryExpression();
    {if (true) return s + s2;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        s = Name();
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[111] = jj_gen;
            break label_40;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
    s = s.concat("[]");
        }
        jj_consume_token(RPAREN);
        s = "(" + s + ")";
        s2 = UnaryExpressionNotPlusMinus();
    {if (true) return s + s2;}
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String PrimaryExpression() throws ParseException {
 String s, s2 = null;
    s = PrimaryPrefix();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_41;
      }
      s2 = PrimarySuffix();
    s = s + s2;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String PrimaryPrefix() throws ParseException {
  String expr;
  String s = null;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      s = Literal();
                 {if (true) return s;}
      break;
    case IDENTIFIER:
      s = Name();
              {if (true) return s;}
      break;
    case THIS:
      jj_consume_token(THIS);
          {if (true) return "this";}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                s = "super."; s = s + t.image; {if (true) return s;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      s = Expression();
      jj_consume_token(RPAREN);
                            {if (true) return ("(" + s + ")");}
      break;
    case NEW:
      s = AllocationExpression();
                              {if (true) return s;}
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String PrimarySuffix() throws ParseException {
 String s = null;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      s = Expression();
      jj_consume_token(RBRACKET);
                            {if (true) return "[" + s + "]";}
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                        s = "."; s = s + t.image; {if (true) return s;}
      break;
    case LPAREN:
      s = Arguments();
                    {if (true) return s;}
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Literal() throws ParseException {
 String s = null;
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                         {if (true) return t.image;}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                {if (true) return t.image;}
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                           {if (true) return t.image;}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        {if (true) return t.image;}
      break;
    case TRUE:
    case FALSE:
      s = BooleanLiteral();
                        {if (true) return s;}
      break;
    case NULL:
      s = NullLiteral();
                     {if (true) return s;}
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
          {if (true) return "true";}
      break;
    case FALSE:
      jj_consume_token(FALSE);
           {if (true) return "false";}
      break;
    default:
      jj_la1[117] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String NullLiteral() throws ParseException {
    jj_consume_token(NULL);
          {if (true) return "null";}
    throw new Error("Missing return statement in function");
  }

  static final public String Arguments() throws ParseException {
 String s1 = "";
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      s1 = ArgumentList();
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return "("+s1+")";}
    throw new Error("Missing return statement in function");
  }

  static final public String ArgumentList() throws ParseException {
 String s, s2 = null;
    s = Expression();

    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      s2 = Expression();
    //s2 = ast.checkTopToken(s2);
    s = s+", "+s2;
    }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String AllocationExpression() throws ParseException {
 String s1, s2 = null;
    if (jj_2_18(2)) {
      jj_consume_token(NEW);
      s1 = PrimitiveType();
      s2 = ArrayDimensions();
    {if (true) return ("new "+s1+s2);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        s1 = Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          s2 = Arguments();
          break;
        case LBRACKET:
          s2 = ArrayDimensions();
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    {if (true) return ("new "+s1+s2);}
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  static final public String ArrayDimensions() throws ParseException {
 String s=null;
    label_43:
    while (true) {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
      if (jj_2_19(2)) {
        ;
      } else {
        break label_43;
      }
    }
    label_44:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_44;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
    {if (true) return "check";}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  static final public JavaStmt Statement() throws ParseException {
 JavaStmt newStmt = null;
    if (jj_2_21(2)) {
      newStmt = LabeledStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished LabeledStatement");
    {if (true) return newStmt;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        newStmt = Block();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished Block");
    {if (true) return newStmt;}
        break;
      case SEMICOLON:
        newStmt = EmptyStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished emptyStatement");
    {if (true) return newStmt;}
        break;
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        newStmt = StatementExpression();
        jj_consume_token(SEMICOLON);
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished StatementExpression");
    {if (true) return newStmt;}
        break;
      case SWITCH:
        newStmt = SwitchStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished SwitchStatement");
    {if (true) return newStmt;}
        break;
      case IF:
        newStmt = IfStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished IfStatement");
    {if (true) return newStmt;}
        break;
      case WHILE:
        newStmt = WhileStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unifinished WhileStatement");
    {if (true) return newStmt;}
        break;
      case DO:
        newStmt = DoStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished DoStatement");
    {if (true) return newStmt;}
        break;
      case FOR:
        newStmt = ForStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished ForStatement");
    {if (true) return newStmt;}
        break;
      case BREAK:
        newStmt = BreakStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished BreakStatement");
    {if (true) return newStmt;}
        break;
      case CONTINUE:
        newStmt = ContinueStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished ContinueStatement");
    {if (true) return newStmt;}
        break;
      case RETURN:
        newStmt = ReturnStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished ReturnStatement");
    {if (true) return newStmt;}
        break;
      case THROW:
        newStmt = ThrowStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished ThrowStatement");
    {if (true) return newStmt;}
        break;
      case SYNCHRONIZED:
        newStmt = SynchronizedStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished SynchronizedStatement");
    {if (true) return newStmt;}
        break;
      case TRY:
        newStmt = TryStatement();
    if(newStmt == null)
      logger.severe("EnvGenParser.jj : unfinished TryStatement");
    {if (true) return newStmt;}
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt LabeledStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt Block() throws ParseException {
 JavaStmt stmt, newStmt = null;
    jj_consume_token(LBRACE);
    stmt = BlockStatement();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_45;
      }
      newStmt = BlockStatement();
      stmt = JavaGr.newSequenceStmt(stmt, newStmt);
    }
    jj_consume_token(RBRACE);
    {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt BlockStatement() throws ParseException {
 JavaStmt newStmt = null;
    if (jj_2_22(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        newStmt = Statement();
    {if (true) return newStmt;}
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void LocalVariableDeclaration() throws ParseException {
    Type();
    VariableDeclarator();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_46;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
  }

  static final public JavaStmt EmptyStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(SEMICOLON);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt StatementExpression() throws ParseException {
 JavaStmt newStmt;
 String s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      s = PreIncrementExpression();
                                {if (true) return JavaGr.newExprStmt(JavaGr.newStrExpr(s));}
      break;
    case DECR:
      s = PreDecrementExpression();
                                {if (true) return JavaGr.newExprStmt(JavaGr.newStrExpr(s));}
      break;
    default:
      jj_la1[126] = jj_gen;
      if (jj_2_23(2147483647)) {
        s = Assignment();
    {if (true) return JavaGr.newExprStmt(JavaGr.newStrExpr(s));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          s = PostfixExpression();
                           {if (true) return JavaGr.newExprStmt(JavaGr.newStrExpr(s));}
          break;
        default:
          jj_la1[127] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt SwitchStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_47;
      }
      SwitchLabel();
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRY:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          jj_la1[129] = jj_gen;
          break label_48;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public JavaStmt IfStatement() throws ParseException {
 JavaStmt newStmt, thenpart, elsepart  = null;
 String cond = null;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    cond = Expression();
    jj_consume_token(RPAREN);
    thenpart = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elsepart = Statement();
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    JavaExpr condExpr = JavaGr.newStrExpr(cond);
    if(elsepart == null)
    {
      newStmt = JavaGr.newIfStmt(condExpr, thenpart);
    }
    else
    {
      newStmt = JavaGr.newIfElseStmt(condExpr, thenpart, elsepart);
    }
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt WhileStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt DoStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt ForStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForInit();
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[133] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case INCR:
    case DECR:
      ForUpdate();
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    Statement();
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public void ForInit() throws ParseException {
    if (jj_2_24(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public JavaStmt StatementExpressionList() throws ParseException {
 JavaStmt newStmt = null;
    StatementExpression();
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  static final public JavaStmt BreakStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt ContinueStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt ReturnStatement() throws ParseException {
 String s = null;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      s = Expression();
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return JavaGr.newReturnStmt(JavaGr.newStrExpr(s));}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt ThrowStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt SynchronizedStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public JavaStmt TryStatement() throws ParseException {
 JavaStmt newStmt = null;
    jj_consume_token(TRY);
    Block();
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[140] = jj_gen;
        break label_50;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
    {if (true) return newStmt;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static final private boolean jj_3R_158() {
    if (jj_3R_164()) return true;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_3R_152()) return true;
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_149() {
    Token xsp;
    if (jj_3_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_3R_162()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  static final private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_108()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  static final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(140)) return true;
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(139)) return true;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(138)) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(137)) return true;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_3R_166()) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(136)) return true;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_scan_token(135)) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(134)) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(133)) return true;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(132)) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(130)) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_152()) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_64()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_3R_64()) return true;
    if (jj_3R_55()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_3R_110()) return true;
    return false;
  }

  static final private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_123()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_3R_148()) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_122()) return true;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_3R_147()) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_3R_53()) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_3R_134()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_3R_54()) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_3R_53()) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_176() {
    if (jj_3R_180()) return true;
    return false;
  }

  static final private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_169() {
    if (jj_3R_170()) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_211() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static final private boolean jj_3R_210() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_168() {
    if (jj_3R_175()) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_56()) return true;
    return false;
  }

  static final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_208() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static final private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_207() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_3R_163()) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_65()) return true;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_3R_64()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3R_205() {
    if (jj_3R_207()) return true;
    return false;
  }

  static final private boolean jj_3R_204() {
    if (jj_3R_206()) return true;
    return false;
  }

  static final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    if (jj_3R_192()) return true;
    return false;
  }

  static final private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_66()) return true;
    return false;
  }

  static final private boolean jj_3R_200() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_199() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    if (jj_3R_192()) return true;
    return false;
  }

  static final private boolean jj_3R_197() {
    if (jj_3R_201()) return true;
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_196() {
    if (jj_3R_200()) return true;
    return false;
  }

  static final private boolean jj_3R_195() {
    if (jj_3R_199()) return true;
    return false;
  }

  static final private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    if (jj_3R_190()) return true;
    return false;
  }

  static final private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    if (jj_3R_192()) return true;
    return false;
  }

  static final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_190() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    }
    if (jj_3R_188()) return true;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_188() {
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    }
    }
    if (jj_3R_186()) return true;
    return false;
  }

  static final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_97()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_3R_155()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_3R_188()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_145() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_58()) return true;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_3R_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(NEXT)) return true;
    return false;
  }

  static final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    if (jj_3R_182()) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_scan_token(EVENTUALLY)) return true;
    return false;
  }

  static final private boolean jj_3R_182() {
    if (jj_3R_184()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_179()) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_scan_token(GLOBALLY)) return true;
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_183() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_181() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  static final private boolean jj_3R_174() {
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_3R_149()) return true;
    return false;
  }

  static final private boolean jj_3R_178() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_3R_149()) return true;
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_171() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  static final private boolean jj_3R_172() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_67()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(IMPLICATION)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_3R_124()) return true;
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_3R_170()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public EnvGenParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[142];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000,0x20000,0x58000000,0x0,0x59c00000,0x0,0x0,0x80000,0x58000000,0x0,0x0,0x40000,0x200000,0x0,0x40000000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x58000000,0x0,0x6000000,0x6000000,0x59c00000,0x59c00000,0x18000000,0x18000000,0x0,0x0,0x0,0x18000000,0x0,0x0,0x18000000,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x20000000,0x20000000,0x0,0x0,0x60000000,0x40000000,0x20000000,0x20000000,0x20000000,0x20000000,0x0,0x60000000,0x40000000,0x0,0x0,0x0,0x0,0x400000,0x400000,0x18000000,0x0,0x18000000,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0xd8000000,0x0,0x40000000,0x0,0x40000000,0x40000000,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x18000000,0x18000000,0x18000000,0x0,0x0,0x0,0x98000000,0xd8000000,0x98000000,0x0,0x0,0x18000000,0x0,0xd8000000,0x0,0x0,0x58000000,0x18000000,0x18000000,0x18000000,0x0,0x0,0x0,0x18000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x6a04209,0x0,0x6a04209,0x0,0x0,0x0,0x6a04209,0x0,0x0,0x0,0x0,0x0,0xa04209,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6a04209,0x0,0x0,0x0,0x6a04209,0x6a04209,0x6000000,0x6000000,0x0,0x0,0x0,0x6000000,0x0,0x2000000,0x6000000,0x0,0x8000000,0x80000,0x40401010,0x0,0x40400000,0x40001000,0x40001000,0x800,0x40000,0x71a05209,0x70a05209,0x71001000,0x71001000,0x40000000,0x40000000,0x800,0x71a05209,0x70a05209,0x70001000,0x70001000,0x0,0x0,0x0,0x0,0x6000000,0x0,0x6000000,0x71001000,0x71001000,0x0,0x0,0x0,0x0,0xa04209,0x70000000,0x70000000,0x0,0x86a2c349,0x0,0xa04209,0x0,0xa04209,0xa04209,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x4000000,0x0,0x6000000,0x0,0x0,0x2000000,0x86028140,0x86a2c349,0x86028140,0x0,0x0,0x6000000,0x82,0x86a2c349,0x82,0x400,0x6a04209,0x6000000,0x6000000,0x6000000,0x0,0x0,0x0,0x6000000,0x4,0x2000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1d100001,0x10000000,0x9d100001,0x100000,0x10000000,0x0,0x9d100001,0x100000,0x10000000,0x0,0x0,0x10000000,0x10000401,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9d100001,0x0,0x0,0x0,0x9d100001,0x9d100001,0x1d100000,0x1d100000,0x0,0x80000000,0x80000000,0x1d100000,0x80000000,0x0,0x1d100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000d13,0x10000903,0x12,0x12,0x0,0x0,0x0,0x10000d13,0x10000903,0x902,0x902,0x0,0x0,0x0,0x0,0x9d100024,0x0,0x9d100024,0x12,0x12,0x80,0x0,0x0,0x0,0x10000001,0x0,0x0,0x80,0x9d10127d,0x24,0x10000001,0x0,0x1,0x10000401,0x0,0x9d100024,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9d100024,0x0,0x0,0x9d100024,0x9d100024,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x9d100024,0x80000000,0xd100000,0x0,0x9d100024,0x0,0x80000000,0x0,0x9d10127c,0x9d10127d,0x9d10127c,0x0,0x0,0x9d100024,0x0,0x9d10127d,0x0,0x0,0x9d100025,0x9d100024,0x9d100024,0x9d100024,0x0,0x10000000,0x10000000,0x9d100024,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x10000000,0x20,0x22802000,0x44,0x22802000,0x0,0x90000000,0x8000000,0x8000000,0x800,0x800,0x0,0x0,0x100,0x80,0x80,0x0,0x8,0x0,0x0,0x40,0x0,0x0,0x20,0x80,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x100,0x8,0x8,0x1e01802,0x40,0x1e01802,0x0,0x0,0x0,0x22,0x8,0x40,0x0,0x0,0x0,0x0,0x600022,0x0,0x0,0x8,0x0,0x0,0x40,0x1e01800,0x100,0x2000,0x80000,0x100000,0x10000000,0x20000000,0x8000000,0x48000,0x48000,0x0,0x30600,0x30600,0x0,0x0,0x1800000,0x1800000,0x46000000,0x46000000,0x1800000,0x1e01800,0x1800,0x1800,0x0,0x1800,0x0,0x600000,0x600000,0x8,0x8,0x0,0x88,0x0,0x88,0x0,0x0,0x1e01800,0x40,0x8,0x0,0x600022,0x600022,0x600022,0x40,0x600000,0x0,0x0,0x600022,0x0,0x0,0x600000,0x1e01800,0x600000,0x600000,0x40,0x0,0x0,0x1e01800,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000,0xe000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[24];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public EnvGenParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public EnvGenParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EnvGenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EnvGenParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EnvGenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public EnvGenParser(EnvGenParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(EnvGenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 142; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[144];
    for (int i = 0; i < 144; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 142; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 144; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
